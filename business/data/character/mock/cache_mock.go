// Code generated by MockGen. DO NOT EDIT.
// Source: business/data/character/cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	character "github.com/didiyudha/marvel/business/data/character"
	gomock "github.com/golang/mock/gomock"
)

// MockCaching is a mock of Caching interface.
type MockCaching struct {
	ctrl     *gomock.Controller
	recorder *MockCachingMockRecorder
}

// MockCachingMockRecorder is the mock recorder for MockCaching.
type MockCachingMockRecorder struct {
	mock *MockCaching
}

// NewMockCaching creates a new mock instance.
func NewMockCaching(ctrl *gomock.Controller) *MockCaching {
	mock := &MockCaching{ctrl: ctrl}
	mock.recorder = &MockCachingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaching) EXPECT() *MockCachingMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockCaching) FindOne(ctx context.Context, id int) (character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCachingMockRecorder) FindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCaching)(nil).FindOne), ctx, id)
}

// GetAll mocks base method.
func (m *MockCaching) GetAll(ctx context.Context) ([]character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCachingMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCaching)(nil).GetAll), ctx)
}

// SetAll mocks base method.
func (m *MockCaching) SetAll(ctx context.Context, characters []character.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAll", ctx, characters)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAll indicates an expected call of SetAll.
func (mr *MockCachingMockRecorder) SetAll(ctx, characters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAll", reflect.TypeOf((*MockCaching)(nil).SetAll), ctx, characters)
}

// SetOne mocks base method.
func (m *MockCaching) SetOne(ctx context.Context, character character.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOne", ctx, character)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOne indicates an expected call of SetOne.
func (mr *MockCachingMockRecorder) SetOne(ctx, character interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOne", reflect.TypeOf((*MockCaching)(nil).SetOne), ctx, character)
}
