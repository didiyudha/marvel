// Code generated by MockGen. DO NOT EDIT.
// Source: business/usecase/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	character "github.com/didiyudha/marvel/business/data/character"
	gomock "github.com/golang/mock/gomock"
)

// MockMarvelUseCase is a mock of MarvelUseCase interface.
type MockMarvelUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMarvelUseCaseMockRecorder
}

// MockMarvelUseCaseMockRecorder is the mock recorder for MockMarvelUseCase.
type MockMarvelUseCaseMockRecorder struct {
	mock *MockMarvelUseCase
}

// NewMockMarvelUseCase creates a new mock instance.
func NewMockMarvelUseCase(ctrl *gomock.Controller) *MockMarvelUseCase {
	mock := &MockMarvelUseCase{ctrl: ctrl}
	mock.recorder = &MockMarvelUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarvelUseCase) EXPECT() *MockMarvelUseCaseMockRecorder {
	return m.recorder
}

// GetAllCharacterID mocks base method.
func (m *MockMarvelUseCase) GetAllCharacterID(ctx context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCharacterID", ctx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCharacterID indicates an expected call of GetAllCharacterID.
func (mr *MockMarvelUseCaseMockRecorder) GetAllCharacterID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCharacterID", reflect.TypeOf((*MockMarvelUseCase)(nil).GetAllCharacterID), ctx)
}

// GetCharacter mocks base method.
func (m *MockMarvelUseCase) GetCharacter(ctx context.Context, id int) (character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, id)
	ret0, _ := ret[0].(character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockMarvelUseCaseMockRecorder) GetCharacter(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockMarvelUseCase)(nil).GetCharacter), ctx, id)
}
